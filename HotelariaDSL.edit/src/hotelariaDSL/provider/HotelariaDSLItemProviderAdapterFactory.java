/**
 */
package hotelariaDSL.provider;

import hotelariaDSL.util.HotelariaDSLAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class HotelariaDSLItemProviderAdapterFactory extends HotelariaDSLAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public HotelariaDSLItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link hotelariaDSL.Hospede} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HospedeItemProvider hospedeItemProvider;

	/**
	 * This creates an adapter for a {@link hotelariaDSL.Hospede}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHospedeAdapter() {
		if (hospedeItemProvider == null) {
			hospedeItemProvider = new HospedeItemProvider(this);
		}

		return hospedeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hotelariaDSL.Recepcionista} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RecepcionistaItemProvider recepcionistaItemProvider;

	/**
	 * This creates an adapter for a {@link hotelariaDSL.Recepcionista}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRecepcionistaAdapter() {
		if (recepcionistaItemProvider == null) {
			recepcionistaItemProvider = new RecepcionistaItemProvider(this);
		}

		return recepcionistaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hotelariaDSL.Quarto} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuartoItemProvider quartoItemProvider;

	/**
	 * This creates an adapter for a {@link hotelariaDSL.Quarto}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuartoAdapter() {
		if (quartoItemProvider == null) {
			quartoItemProvider = new QuartoItemProvider(this);
		}

		return quartoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hotelariaDSL.HospedagemPago} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HospedagemPagoItemProvider hospedagemPagoItemProvider;

	/**
	 * This creates an adapter for a {@link hotelariaDSL.HospedagemPago}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHospedagemPagoAdapter() {
		if (hospedagemPagoItemProvider == null) {
			hospedagemPagoItemProvider = new HospedagemPagoItemProvider(this);
		}

		return hospedagemPagoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hotelariaDSL.CategoriaQuarto} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CategoriaQuartoItemProvider categoriaQuartoItemProvider;

	/**
	 * This creates an adapter for a {@link hotelariaDSL.CategoriaQuarto}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCategoriaQuartoAdapter() {
		if (categoriaQuartoItemProvider == null) {
			categoriaQuartoItemProvider = new CategoriaQuartoItemProvider(this);
		}

		return categoriaQuartoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hotelariaDSL.HospedagemComunitario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HospedagemComunitarioItemProvider hospedagemComunitarioItemProvider;

	/**
	 * This creates an adapter for a {@link hotelariaDSL.HospedagemComunitario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHospedagemComunitarioAdapter() {
		if (hospedagemComunitarioItemProvider == null) {
			hospedagemComunitarioItemProvider = new HospedagemComunitarioItemProvider(this);
		}

		return hospedagemComunitarioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hotelariaDSL.Aplicacao} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AplicacaoItemProvider aplicacaoItemProvider;

	/**
	 * This creates an adapter for a {@link hotelariaDSL.Aplicacao}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAplicacaoAdapter() {
		if (aplicacaoItemProvider == null) {
			aplicacaoItemProvider = new AplicacaoItemProvider(this);
		}

		return aplicacaoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hotelariaDSL.Atributo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AtributoItemProvider atributoItemProvider;

	/**
	 * This creates an adapter for a {@link hotelariaDSL.Atributo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAtributoAdapter() {
		if (atributoItemProvider == null) {
			atributoItemProvider = new AtributoItemProvider(this);
		}

		return atributoItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (hospedeItemProvider != null) hospedeItemProvider.dispose();
		if (recepcionistaItemProvider != null) recepcionistaItemProvider.dispose();
		if (quartoItemProvider != null) quartoItemProvider.dispose();
		if (hospedagemPagoItemProvider != null) hospedagemPagoItemProvider.dispose();
		if (categoriaQuartoItemProvider != null) categoriaQuartoItemProvider.dispose();
		if (hospedagemComunitarioItemProvider != null) hospedagemComunitarioItemProvider.dispose();
		if (aplicacaoItemProvider != null) aplicacaoItemProvider.dispose();
		if (atributoItemProvider != null) atributoItemProvider.dispose();
	}

}
